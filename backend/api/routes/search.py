"""
Search API Routes - Image & Text Search

Endpoints:
- POST /search/image - T√¨m ki·∫øm b·∫±ng ·∫£nh
- POST /search/text - T√¨m ki·∫øm b·∫±ng text
- POST /search/rebuild - Rebuild FAISS index cho project
"""

from fastapi import APIRouter, Depends, HTTPException, UploadFile, File, Form
from sqlmodel import Session, select
from PIL import Image
import io
from typing import Optional

from db.session import get_session
from dependencies.dependencies import get_current_user
from services.search.embeddings_service import (
    search_by_image,
    search_by_text,
    rebuild_project_embeddings
)
from services.search.faiss_index import get_project_stats
from models.projects import Projects
from models.folders import Folders
from utils.path_builder import build_file_url, build_full_path
from core.config import settings

router = APIRouter(prefix="/search", tags=["Search"])


def format_asset_response(asset, session: Session) -> dict:
    """
    Format asset data gi·ªëng nh∆∞ upload-images API response.
    """
    # L·∫•y th√¥ng tin project v√† folder
    folder = session.get(Folders, asset.folder_id) if asset.folder_id else None
    project = session.get(Projects, folder.project_id) if folder else None
    
    # Build file URL
    base_url = getattr(settings, 'BASE_URL', 'http://localhost:8000')
    file_url = build_file_url(session, project.id, folder.id, asset.system_name, base_url) if project and folder else ""
    
    # Build folder path using build_full_path function
    folder_path = build_full_path(session, project.id, folder.id) if project and folder else ""
    
    return {
        "status": 1,
        "id": asset.id,
        "name": asset.name,
        "original_name": asset.name,  # Gi·∫£ s·ª≠ name l√† original_name
        "system_name": asset.system_name,
        "file_url": file_url,
        "file_extension": asset.file_extension,
        "file_type": asset.file_type,
        "format": asset.format,
        "file_size": asset.file_size,
        "width": asset.width,
        "height": asset.height,
        "project_slug": project.slug if project else "",
        "folder_path": folder_path,
        "is_private": asset.is_private,
        "created_at": asset.created_at,
        "updated_at": asset.updated_at
    }


def validate_project_ownership(session: Session, project_id: int, user_id: int) -> Projects:
    """
    Validate project t·ªìn t·∫°i v√† thu·ªôc v·ªÅ user.
    
    Args:
        session: Database session
        project_id: ID c·ªßa project
        user_id: ID c·ªßa user
    
    Returns:
        Projects object n·∫øu valid
    
    Raises:
        HTTPException n·∫øu project kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng thu·ªôc v·ªÅ user
    """
    project = session.get(Projects, project_id)
    if not project:
        raise HTTPException(status_code=404, detail="Project kh√¥ng t·ªìn t·∫°i")
    
    if project.user_id != user_id:
        raise HTTPException(
            status_code=403, 
            detail="B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p project n√†y"
        )
    
    return project


@router.post("/image")
async def search_by_image_upload(
    file: UploadFile = File(...),
    project_id: Optional[int] = Form(None),  # Optional - n·∫øu None th√¨ search t·∫•t c·∫£ projects c·ªßa user
    folder_id: Optional[int] = Form(None),
    k: int = Form(10),
    similarity_threshold: float = Form(0.7),  # Ng∆∞·ª°ng similarity (0.7 = 70% gi·ªëng nhau)
    session: Session = Depends(get_session),
    current_user: dict = Depends(get_current_user)
):
    """
    T√¨m ki·∫øm ·∫£nh t∆∞∆°ng t·ª± b·∫±ng c√°ch upload 1 ·∫£nh.
    
    Args:
        file: File ·∫£nh upload
        project_id: (Optional) ID c·ªßa project c·∫ßn t√¨m. N·∫øu None th√¨ search t·∫•t c·∫£ projects c·ªßa user
        folder_id: (Optional) Ch·ªâ t√¨m trong folder n√†y
        k: S·ªë l∆∞·ª£ng k·∫øt qu·∫£ tr·∫£ v·ªÅ (default: 10)
    
    Returns:
        {
            "status": 1,
            "data": [...assets...],
            "total": <s·ªë l∆∞·ª£ng>
        }
    """
    try:
        # üîí SECURITY: Validate project ownership (n·∫øu c√≥ project_id)
        if project_id:
            validate_project_ownership(session, project_id, current_user.id)
        
        # ƒê·ªçc ·∫£nh
        content = await file.read()
        image = Image.open(io.BytesIO(content)).convert("RGB")
        
        # T√¨m ki·∫øm
        assets = search_by_image(
            session=session,
            project_id=project_id,
            image=image,
            k=k,
            folder_id=folder_id,
            user_id=current_user.id,
            similarity_threshold=similarity_threshold
        )
        
        # Format response gi·ªëng nh∆∞ upload-images API
        results = []
        for asset in assets:
            formatted_asset = format_asset_response(asset, session)
            results.append({
                "file": formatted_asset,
                "message": "Search result",
                "result": True
            })
        
        return {
            "data": {
                "searchResults": results[0] if len(results) == 1 else results
            },
            "extensions": {
                "cost": {
                    "requestedQueryCost": 0,
                    "maximumAvailable": 50000
                }
            }
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Search failed: {str(e)}")


@router.post("/text")
def search_by_text_query(
    query: str = Form(...),
    project_id: Optional[int] = Form(None),  # Optional - n·∫øu None th√¨ search t·∫•t c·∫£ projects c·ªßa user
    folder_id: Optional[int] = Form(None),
    k: int = Form(10),
    similarity_threshold: float = Form(0.7),  # Ng∆∞·ª°ng similarity (0.7 = 70% gi·ªëng nhau)
    session: Session = Depends(get_session),
    current_user: dict = Depends(get_current_user)
):
    """
    T√¨m ki·∫øm ·∫£nh b·∫±ng text query (semantic search).
    
    Args:
        query: Text query (e.g., "a cat on the sofa", "sunset beach")
        project_id: (Optional) ID c·ªßa project c·∫ßn t√¨m. N·∫øu None th√¨ search t·∫•t c·∫£ projects c·ªßa user
        folder_id: (Optional) Ch·ªâ t√¨m trong folder n√†y
        k: S·ªë l∆∞·ª£ng k·∫øt qu·∫£ tr·∫£ v·ªÅ (default: 10)
    
    Returns:
        {
            "status": 1,
            "data": [...assets...],
            "total": <s·ªë l∆∞·ª£ng>,
            "query": "<text query>"
        }
    """
    try:
        # üîí SECURITY: Validate project ownership (n·∫øu c√≥ project_id)
        if project_id:
            validate_project_ownership(session, project_id, current_user.id)
        
        # T√¨m ki·∫øm
        assets = search_by_text(
            session=session,
            project_id=project_id,
            query_text=query,
            k=k,
            folder_id=folder_id,
            user_id=current_user.id,
            similarity_threshold=similarity_threshold
        )
        
        # Format response gi·ªëng nh∆∞ upload-images API
        results = []
        for asset in assets:
            formatted_asset = format_asset_response(asset, session)
            results.append({
                "file": formatted_asset,
                "message": "Search result",
                "result": True
            })
        
        return {
            "data": {
                "searchResults": results[0] if len(results) == 1 else results
            },
            "extensions": {
                "cost": {
                    "requestedQueryCost": 0,
                    "maximumAvailable": 50000
                }
            }
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Search failed: {str(e)}")


@router.post("/rebuild")
def rebuild_project_index(
    project_id: int = Form(...),
    session: Session = Depends(get_session),
    current_user: dict = Depends(get_current_user)
):
    """
    Rebuild FAISS index cho project t·ª´ database.
    
    S·ª≠ d·ª•ng khi:
    - Index b·ªã l·ªói
    - Sau khi restore database
    - Sau khi migration
    
    Args:
        project_id: ID c·ªßa project c·∫ßn rebuild
    
    Returns:
        {
            "status": 1,
            "message": "Index rebuilt successfully",
            "stats": {...}
        }
    """
    try:
        # üîí SECURITY: Validate project ownership
        validate_project_ownership(session, project_id, current_user.id)
        
        # Rebuild index
        rebuild_project_embeddings(session, project_id)
        
        # Get stats
        stats = get_project_stats(project_id)
        
        return {
            "status": 1,
            "message": f"Project {project_id} index rebuilt successfully",
            "stats": stats
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Rebuild failed: {str(e)}")

@router.get("/rebuild-all")
def rebuild_all_projects_index(
    session: Session = Depends(get_session),
    current_user: dict = Depends(get_current_user)
):
    """
    Rebuild FAISS index cho t·∫•t c·∫£ projects c·ªßa user.
    
    S·ª≠ d·ª•ng khi:
    - C√°c index b·ªã l·ªói
    - Sau khi restore database
    - Sau khi migration
    
    Returns:
        {
            "status": 1,
            "message": "All indexes rebuilt successfully",
            "projects": [...]
        }
    """
    try:
        # L·∫•y t·∫•t c·∫£ projects c·ªßa user
        from models.projects import Projects
        user_projects = session.exec(
            select(Projects).where(Projects.user_id == current_user.id)
        ).all()
        
        if not user_projects:
            return {
                "status": 1,
                "message": "No projects found for user",
                "projects": []
            }
        
        # Rebuild index cho t·ª´ng project
        results = []
        for project in user_projects:
            try:
                rebuild_project_embeddings(session, project.id)
                stats = get_project_stats(project.id)
                results.append({
                    "project_id": project.id,
                    "name": project.name,
                    "status": "success",
                    "stats": stats
                })
            except Exception as e:
                results.append({
                    "project_id": project.id,
                    "name": project.name,
                    "status": "error",
                    "error": str(e)
                })
        
        return {
            "status": 1,
            "message": "All indexes rebuilt",
            "projects": results
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Rebuild failed: {str(e)}")


@router.get("/stats/{project_id}")
def get_search_stats(
    project_id: int,
    session: Session = Depends(get_session),
    current_user: dict = Depends(get_current_user)
):
    """
    L·∫•y th·ªëng k√™ v·ªÅ FAISS index c·ªßa project.
    
    Returns:
        {
            "project_id": <id>,
            "total_vectors": <s·ªë l∆∞·ª£ng vectors>,
            "indexed": true/false,
            "dimension": 512
        }
    """
    # üîí SECURITY: Validate project ownership
    validate_project_ownership(session, project_id, current_user.id)
    
    stats = get_project_stats(project_id)
    stats["project_id"] = project_id
    
    return stats

